//实现Promise.all

Promise.all1= function all(promises){
  return new Promise((resolve, reject) => {
    let result = new Array(promises.length)
    let count = 0
    if (promises.length){
      for (let i = 0; i < promises.length; i++) {
        let promise = promises[i]
        promise.then(
          value => {
            result[i] = value
            count++
            if (count ===promises.length)
              resolve(result)
          },
          reason => {
            reject(reason)
          }
        )
      }
    }
    else {resolve(result)}
  })
}

/////////////////////////

Promise.all([p1, p2, p3])//必须是promise组成的数组，再返回promise
  //返回的promise以 数组的结果，数组中每个promise都成功，则返回的promise成功，成功的值是数组中组成的值
  .then(values => {
    //[...,...,...]
  })

//全成功的例子

Promise.all(
  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]
)
  .then(values => {
    console.log(values)//[1,2,3]
  })


//有一个失败的例子
Promise.all(
  [1, Promise.resolve(2), Promise.reject(3)]
)
  .then(values => {
      console.log(values)
    },
    reason => {
      console.log(reason)//3,  values中谁先reject,就返回谁，返回一个
    })


/////////////////////////

// 3-5秒后resolve相应值

function getValue(value) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(value)
    }, 3000 + Math.random() * 2000)
  })
}

Promise.all([getValue(1), getValue(2), getValue(3)])
  .then(values => {
    console.log(values)
  })